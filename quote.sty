\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{sty/quote}[Display meta data like the source below quotes.]

\RequirePackage{etoolbox}   % add methods to an environment


\makeatletter % Grant access to private commands (Name contains an @).


% Give the internal start and end commands of the quote environment aliases to be able to call them later on.
\let\@oldquote\quote        % begin{quote}
\let\@endoldquote\endquote  % end{quote}


% Modify environment \begin{quote}
% - if set, display the author and page information below the quote
\renewenvironment{quote}
{
    \@oldquote % begin{quote}
}
{
    \@drawMetaData
    \@endoldquote % end{quote}
    \addvspace{\bigskipamount}
}
  
        
% Declare private methods.
\newcommand{\@setsource}{}
\newcommand{\@setpages}{}
\newcommand{\@setlines}{}


% Define public methods.
\AtBeginEnvironment{quote}
{
    % Define method \source{source}
    % - display the source below the quote
    % - only accessible inside the environment (aka method)
    % @param #1 Name of the source to display
    \renewcommand{\@setsource}[1]
    {
        \newcommand\@sourcename{#1} % save name of the source
    }
    \global\let\source\@setsource % Make the method public inside the environment.


    % Define method \page{page}
    % - display the page number below the quote
    % - only accessible inside the environment (aka method)
    % @param #1 Page number(s) to display, e.g. 12 or 3--6
    \renewcommand{\@setpages}[1]
    {
        \newcommand\@pagenumbers{#1} % save page number(s)
    }
    \global\let\pages\@setpages % Make the method public inside the environment.


    % Define method \line{line}
    % - display the line number below the quote
    % - only accessible inside the environment (aka method)
    % @param #1 Line number(s) to display, e.g. 12 or 3--6
    \renewcommand{\@setlines}[1]
    {
        \newcommand\@linenumbers{#1} % save line number(s)
    }
    \global\let\lines\@setlines % Make the method public inside the environment.
}


% Define private function \@ifMetaData{true}
% - run script only if any meta data was set
% @param true   script to run if meta data was set
\newcommand{\@ifMetaData}[1]
{
    \@ifundefined{@sourcename}{}{\def\@hasMetaData{}}
    \@ifundefined{@pagenumbers}{}{\def\@hasMetaData{}}
    \@ifundefined{@linenumbers}{}{\def\@hasMetaData{}}
    \@ifundefined{@hasMetaData}{}{#1}
}


% Define private function \@drawMetaData
% - draw the meta data about the quote
% - private method (name contains an @)
\newcommand{\@drawMetaData}
{
    \@ifMetaData
    {
        \par\nobreak\smallskip\hfill
        (
        \@ifundefined{@sourcename}{}%
        {%
            \@sourcename%
            \def\@wroteMetaData{}% do a em-dash in front of next data
        }%
        \@ifundefined{@pagenumbers}{}%
        {%
            \@drawEmDash%
            Seite \@pagenumbers%
            \def\@wroteMetaData{}% do a em-dash in front of next data
        }%
        \@ifundefined{@linenumbers}{}%
        {%
            \@drawEmDash%
            Zeile \@linenumbers%
            \def\@wroteMetaData{}% do a em-dash in front of next data
        }
        )
    }
}


% Define private function \@drawEmDash
% - draw an em-dash if there is meta data to the left
\newcommand{\@drawEmDash}
{
    \@ifundefined{@wroteMetaData}{}{---}
}


\makeatother % Revoke access to private commands (Name contains an @).